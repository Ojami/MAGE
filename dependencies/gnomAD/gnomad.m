function R = gnomad(varargin)
% implements examples of gnomAD API (GraphQL)
% Examples: https://gist.githubusercontent.com/hliang/aad37d960adf42da16b3bad8677d7f19/raw/dd095d8e0c02ed1f351f5efc9300ac355e7abc8a/gnomad_graphQL

p = inputParser;
p.CaseSensitive = false;
p.StructExpand = true;
validateInput = @(x) validateattributes(x,{'char','string'},...
    {'nonempty', 'scalartext'});
addParameter(p, 'variantId', '', validateInput);
addParameter(p, 'chrom', '', validateInput);
addParameter(p, 'query', '', validateInput);
addParameter(p, 'gene_symbol', '', validateInput);
addParameter(p, 'gene_id', '', validateInput);
addParameter(p, 'start', -1, @(x) isnumeric(x) && x > 0);
addParameter(p, 'stop', -1, @(x) isnumeric(x) && x > 0);
addParameter(p, 'dataset', '', validateInput);
addParameter(p, 'reference_genome', '', validateInput);
addParameter(p, 'verbose', false, @islogical);
addParameter(p, 'compact', false, @islogical); % to skip variants data when region/gene is queried (false)
addParameter(p, 'liftover', false, @islogical);
p.parse(varargin{:});
p = p.Results;
[p.variantMethod, p.regionMethod, p.searchMethod, p.geneMethod] = deal(false);

if isempty(p.variantId) && isempty(p.chrom) && isempty(p.query) && ...
        isempty(p.gene_id) && isempty(p.gene_symbol)
    fprintf('ERROR:either variantId or start/stop/chrom must be set!\n')
    fprintf('\ngnomad function currently accepts inputs in two forms:\n')
    fprintf('1-variantId, e.g: "1-55516888-G-GA"\n')
    fprintf('2-region based: start: 1, stop: 20, chrom: "1"\n')
    fprintf('3-search query: query: "rs123"\n')
    fprintf('4-gene based: gene_symbol: "PSD3", or gene_id: "ENSG0001"\n')
    fprintf(['dataset/reference_genome can be either gnomad_r2_1/GRCh37',...
        ' or gnomad_r3/GRCh38.\ndefault is gnomad_r2_1 and GRCh37\n'])
    return
elseif ~isempty(p.variantId)
    if p.liftover
        p.liftoverMethod = true;
    else
        p.variantMethod = true;
    end
elseif ~isempty(p.chrom)
    p.regionMethod = true;
elseif ~isempty(p.query)
    p.searchMethod = true;
else
    p.geneMethod = true;
end

if isempty(p.dataset)
    p.dataset = 'gnomad_r2_1'; % 'gnomad_r3'
    if p.verbose
        fprintf('dataset was set to %s\n', p.dataset);
    end
end
if isempty(p.reference_genome)
    p.reference_genome = 'GRCh37';
    if p.verbose
        fprintf('reference_genome was set to %s\n', p.reference_genome);
    end
end

getURL = "https://gnomad.broadinstitute.org/api";
headers = {'Content-Type' 'application/json'; 'Accept' 'application/json'};
options = weboptions('RequestMethod', 'post', 'HeaderFields', headers, ...
'Timeout', 20000);

p.dataset = char(p.dataset);
p.reference_genome = char(p.reference_genome);

data = getgraphQC(p);
try
    R = webwrite(getURL, data, options);
catch ME
    R = ME.message;
end

end % END

%% subfunctions ===========================================================
function data = getgraphQC(indata)
if isfield(indata, "liftoverMethod") && indata.liftoverMethod % liftover ---------------------------------------
    
    if ismember(indata.reference_genome, "GRCh37")
        indataStruct.source_variant_id = indata.variantId;
        query = ['query getVariant($source_variant_id: String!) {',newline,...
        '  liftover(source_variant_id: $source_variant_id, reference_genome: ',indata.reference_genome,...
        ') {',newline,...
        '    liftover {',newline,...
        '      variant_id',newline,...
        '      reference_genome',newline,...
        '    }',newline,...
        '  }',newline,...
        '}'];
    else
        indataStruct.liftover_variant_id = indata.variantId;
        query = ['query getVariant($liftover_variant_id: String!) {',newline,...
        '  liftover(liftover_variant_id: $liftover_variant_id, reference_genome: ',indata.reference_genome,...
        ') {',newline,...
        '    source {',newline,...
        '      variant_id',newline,...
        '      reference_genome',newline,...
        '    }',newline,...
        '  }',newline,...
        '}'];
    end
elseif indata.variantMethod % variantId -----------------------------------
    indataStruct.variantId = indata.variantId;
    query = ['query getVariant($variantId: String!) {',newline,...
    '  variant(variantId: $variantId, dataset: ',indata.dataset,...
    ') {',newline,...
    '    variantId',newline,...
    '    rsid',newline,...
    '    reference_genome', newline,...
    '    chrom', newline, ...
    '    pos', newline, ...
    '    ref', newline, ...
    '    alt', newline, ...
    '    sortedTranscriptConsequences {',newline,...
    '      lof',newline,...
    '      lof_filter',newline,...
    '      lof_flags',newline,...
    '      major_consequence', newline,...
    '      gene_symbol',newline,...
    '    }',newline,...
    '  }',newline,...
    '}'];

elseif indata.regionMethod % region based ---------------------------------
    indataStruct.chrom = indata.chrom;
    indataStruct.start = indata.start;
    indataStruct.stop  = indata.stop;
    
    if indata.compact % skip variants field for a faster fetch
        query = ['query getRegion($start: Int!, $stop: Int!, $chrom: String!) {',newline,...
        '  region(start: $start, stop: $stop, chrom: $chrom, reference_genome: ',...
        indata.reference_genome, ') {', newline,...
        '    genes{', newline,...
        '      symbol', newline,...
        '      gene_id', newline,...
        '      start', newline,...
        '      stop}', newline,...
        '  }',newline,...
        '}'];
        
    else
        query = ['query getRegion($start: Int!, $stop: Int!, $chrom: String!) {',newline,...
        '  region(start: $start, stop: $stop, chrom: $chrom, reference_genome: ',...
        indata.reference_genome, ') {', newline,...
        '    genes{', newline,...
        '      symbol', newline,...
        '      gene_id', newline,...
        '      start', newline,...
        '      stop}', newline,...
        '    variants (dataset: ', indata.dataset, ') {',newline,...
        '      variantId',newline,...
        '      pos',newline,...
        '      ref',newline,...
        '      alt',newline,...
        '      consequence',newline,...
        '      gene_id',newline,...
        '      gene_symbol',newline,...
        '      lof',newline,...
        '      lof_filter',newline,...
        '      lof_flags',newline,...
        '      rsid',newline,...
        '    }',newline,...
        '  }',newline,...
        '}'];
    end
    
elseif indata.searchMethod % query search, e.g. rs123 can be search as a query to get variantId label
    indataStruct.query = indata.query; 
    query = ['query getLabel($query: String!) {',newline,...
    '  variant_search(query: $query, dataset: ',...
    indata.dataset, ') {', newline,...
    '    variant_id',newline,...
    '  }',newline,...
    '}'];
elseif indata.geneMethod % gene based -------------------------------------
    indataStruct.gene_symbol = indata.gene_symbol;
    indataStruct.gene_id = indata.gene_id;
    
    if indata.compact % skip variants field for a faster fetch
        query = ['query getGene($gene_symbol: String!, $gene_id: String!) {',newline,...
        '  gene(gene_symbol: $gene_symbol, gene_id: $gene_id, reference_genome: ',...
        indata.reference_genome, ') {', newline,...
        '    gene_id', newline,...
        '    strand', newline,...
        '    start', newline,...
        '    stop', newline,...
        '    chrom', newline,...
        '    symbol', newline,...
        '    canonical_transcript_id', newline,...
        '    transcripts{', newline,...
        '      transcript_id', newline,...
        '      exons{', newline,...
        '        start', newline,...
        '        stop', newline,...
        '        feature_type}}', newline,...
        '  }',newline,...
        '}'];
        
    else
        query = ['query getGene($gene_symbol: String!, $gene_id: String!) {',newline,...
        '  gene(gene_symbol: $gene_symbol, gene_id: $gene_id, reference_genome: ',...
        indata.reference_genome, ') {', newline,...
        '    gene_id', newline,...
        '    strand', newline,...
        '    start', newline,...
        '    stop', newline,...
        '    chrom', newline,...
        '    symbol', newline,...
        '    canonical_transcript_id', newline,...
        '    transcripts{', newline,...
        '      transcript_id', newline,...
        '      exons{', newline,...
        '        start', newline,...
        '        stop', newline,...
        '        feature_type}}', newline,...
        '    exons {', newline,...
        '      start', newline,...
        '      stop',newline,...
        '      feature_type}', newline,...
        '    variants (dataset: ', indata.dataset, ') {',newline,...
        '      consequence',newline,...
        '      pos',newline,...
        '      ref',newline,...
        '      alt',newline,...
        '      lof',newline,...
        '      lof_filter',newline,...
        '      lof_flags',newline,...
        '      rsid',newline,...
        '    }',newline,...
        '  }',newline,...
        '}'];
    end
    
else
    error('uknown method!')
end

data = struct('query', query, 'variables', []);
data.variables = indataStruct;
end

%% commented
% outdated region
% query = ['query getRegion($start: Int!, $stop: Int!, $chrom: String!) {',newline,...
% '  region(start: $start, stop: $stop, chrom: $chrom, reference_genome: ',...
% indata.reference_genome, ') {', newline,...
% '    genes{', newline,...
% '      gene_name', newline,...
% '      gene_id', newline,...
% '      start', newline,...
% '      stop', newline,...
% '    canonical_transcript_id', newline,...
% '    transcripts{', newline,...
% '      transcript_id', newline,...
% '      exons{', newline,...
% '        start', newline,...
% '        stop', newline,...
% '        feature_type}}}', newline,...
% '    variants (dataset: ', indata.dataset, ') {',newline,...
% '      variantId',newline,...
% '      pos',newline,...
% '      ref',newline,...
% '      alt',newline,...
% '      consequence',newline,...
% '      gene_id',newline,...
% '      gene_symbol',newline,...
% '      lof',newline,...
% '      lof_filter',newline,...
% '      lof_flags',newline,...
% '      rsid',newline,...
% '    }',newline,...
% '  }',newline,...
% '}'];
