function [tbl,raw] = queryTargetAssociations(geneId,pageIdx,pageSize)
% queryTargetAssociations  –  Retrieve Open Targets “associatedDiseases”
%                             block and give it back as a tidy table.
%
%   [tbl,raw] = queryTargetAssociations('ENSG00000168000',0,25)
%
% INPUTS
%   geneId   Ensembl gene ID (char)
%   pageIdx  Zero-based index (integer)
%   pageSize Page size         (integer)
%
% OUTPUTS
%   tbl  MATLAB table  [DiseaseID, DiseaseName, OTScore]
%   raw  Full JSON response, already decoded to struct
%
% MATLAB ≥ R2020a

arguments
    geneId   (1,:) char
    pageIdx  (1,1) {mustBeInteger,mustBeNonnegative}
    pageSize (1,1) {mustBeInteger,mustBePositive}
end

%% ---------- GraphQL query (EXACTLY the schema expects) -----------------
lines = {
'query TargetAssociationsQuery('                                   ...
'  $id: String!'                                                   ...
'  $index: Int!'                                                   ...
'  $size: Int!'                                                    ...
'  $sortBy: String!'                                               ...
'  $enableIndirect: Boolean!'                                      ...
'  $datasources: [DatasourceSettingsInput!]'                       ...
'  $rowsFilter: [String!]'                                         ...
'  $facetFilters: [String!]'                                       ...
'  $entitySearch: String!'                                         ...
') {'                                                              ...
'  target(ensemblId: $id) {'                                       ...
'    id'                                                           ...
'    approvedSymbol'                                               ...
'    associatedDiseases('                                          ...
'      page: { index: $index, size: $size }'                       ...
'      orderByScore: $sortBy'                                      ...
'      enableIndirect: $enableIndirect'                            ...
'      datasources: $datasources'                                  ...
'      Bs: $rowsFilter'                                            ...
'      facetFilters: $facetFilters'                                ...
'      BFilter: $entitySearch'                                     ...
'    ) {'                                                          ...
'      count'                                                      ...
'      rows {'                                                     ...
'        disease { id name }'                                      ...
'        score'                                                    ...
'        datasourceScores { componentId: id score }'               ...
'      }'                                                          ...
'    }'                                                            ...
'  }'                                                              ...
'}' };
gql = strjoin(lines,newline);      % ← SINGLE string, not an array!

%% ---------- variables --------------------------------------------------
ids = { ...
  'gwas_credible_sets','gene_burden','eva','genomics_england', ...
  'gene2phenotype','uniprot_literature','uniprot_variants','orphanet', ...
  'clingen','cancer_gene_census','intogen','eva_somatic', ...
  'cancer_biomarkers','chembl','crispr_screen','crispr', ...
  'slapenrich','progeny','reactome','sysbio', ...
  'europepmc','expression_atlas','impc','ot_crispr_validation', ...
  'ot_crispr','encore'};

ds = cellfun(@(id) struct( ...
        'id',        id, ...
        'weight',    1.0, ...      % Float, not int – keeps GraphQL happy
        'propagate', true, ...
        'required',  false), ...
     ids,'uni',0);
vars = struct( ...
    'id',            geneId, ...
    'index',         pageIdx, ...
    'size',          pageSize, ...
    'sortBy',        "score", ...
    'enableIndirect',false, ...
    'datasources',   [ds{:}], ...
    'rowsFilter',    {{}}, ...
    'facetFilters',  {{}}, ...
    'entitySearch',  "" );

body = struct('query',gql,'variables',vars);

%% ---------- POST -------------------------------------------------------
url  = "https://api.platform.opentargets.org/api/v4/graphql";
opts = weboptions('MediaType','application/json', ...
                  'ContentType','json', ...
                  'Timeout',40);

raw = webwrite(url,body,opts);     % Already a struct – don’t jsondecode

if isfield(raw,'errors')
    disp(raw.errors.message)
    [tbl, raw] = deal([]);
    return
end

%% ---------- Flatten to tidy table -------------------------------------
if isempty(raw.data.target)
    [tbl, raw] = deal([]);
    return
end

rows = raw.data.target.associatedDiseases.rows;
n    = numel(rows);

tbl = table( strings(n,1), strings(n,1), zeros(n,1), ...
             'VariableNames',{'DiseaseID','DiseaseName','OTScore'});

for k = 1:n
    tbl.DiseaseID(k)   = rows(k).disease.id;
    tbl.DiseaseName(k) = rows(k).disease.name;
    tbl.OTScore(k)     = rows(k).score;
end
end
